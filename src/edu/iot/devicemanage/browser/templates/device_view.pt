<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      lang="en"
      metal:use-macro="here/main_template/macros/master"
      i18n:domain="plone">

<body>


<metal:style fill-slot="style_slot">
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/vis/4.20.0/vis.min.css" />

    <style type="text/css">
        body, html {
            font-family: sans-serif;
        }

        .custom-style1 {
            fill: #f2ea00;
            fill-opacity: 0;
            stroke-width: 2px;
            stroke: #b3ab00;
        }

        .custom-style2 {
            fill: #00b72b;
            fill-opacity: 0;
            stroke-width: 2px;
            stroke: #00b72b;
        }

        .custom-style3 {
            fill: #00a0f2;
            fill-opacity: 0;
            stroke-width: 2px;
            stroke: #0016dc;
        }

        .custom-style4 {
            fill: #f265c9;
            fill-opacity: 0;
            stroke-width: 2px;
            stroke: #dc279c;
        }
    </style>


</metal:style>

<metal:scripts fill-slot="javascript_head_slot"
	tal:define="navroot context/@@plone_portal_state/navigation_root_url">

    <script>
        require = undefined;
        define = undefined;
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.20.0/vis.min.js"></script>
    <script src="https://cdn.mlkcca.com/v0.6.0/milkcocoa.js"></script>


</metal:scripts>

<metal:content-core fill-slot="content-core">
<metal:main_macro define-macro="content-core">

    <h2>計測データ</h2>


    <div id="visualization"></div>

    <div class="visualClear"><!-- --></div>

    <div tal:replace="structure view/get_param"><!----></div>

    <script type="text/javascript">

        let container = document.getElementById('visualization');

        let names = ['Temperature(c)', 'Pressure(hPa)', 'Humidity(%)', 'BME Temp(c)'];
        //let names = ['Temperature(c)'];

        let dataset = new vis.DataSet();
        let groups = new vis.DataSet();
        groups.add({
            id: 0,
            content: names[0],
            className: 'custom-style1',
            options: {
                drawPoints: {
                    size: 3
                }
            }
        });

        groups.add({
            id: 1,
            content: names[1],
            className: 'custom-style2',
            options: {
                yAxisOrientation: 'right',
                drawPoints: {
                    size: 1
                }
            }
        });

        groups.add({
            id: 2,
            content: names[2],
            className: 'custom-style3',
            options: {
                drawPoints: {
                    size: 1
                }
            }
        });

        groups.add({
            id: 3,
            content: names[3],
            className: 'custom-style4',
            options: {
                drawPoints: {
                    size: 1
                }
            }
        });

        //let dataset = new vis.DataSet(items);
        let date = new Date();
        let options = {
            dataAxis: {
                showMinorLabels: true,
                alignZeros: false
            },
            width: '100%',
            height: '550px',
            legend: { left: { position: "bottom-left" } },
            start: date.setMinutes(date.getMinutes() - 20),
            end: date.setMinutes(date.getMinutes() + 22)

        };
        let graph2d = new vis.Graph2d(container, dataset, groups, options);

        let mlkDs = MilkCocoa.connectWithApiKey(app_id, app_key, app_pass);

        let data_store_path = app_ds + '/' + device_id;

        mlkDs.dataStore(data_store_path).stream().size(150).sort('desc').next(function (err, data) {
            data.forEach(function (d, i) {
                //{"temp":31.25,"envtemp":25.96,"pressure":1006.45532,"humid":62.91309}
                addItem(d.timestamp, d.value.temp, 0);
                addItem(d.timestamp, d.value.pressure, 1);
                addItem(d.timestamp, d.value.humid, 2);
                addItem(d.timestamp, d.value.envtemp, 3);
            });
        });

        function addItem(timestamp, value, g) {
            itm = { x: new Date(timestamp).toLocaleString(), y: value, group: g };
            dataset.add(itm);
        }

        mlkDs.dataStore(data_store_path).on('push', function(pushed) {
            //console.log('pushed!', pushed.id, pushed.value);
            addItem(pushed.timestamp, pushed.value.temp, 0);
            addItem(pushed.timestamp, pushed.value.pressure, 1);
            addItem(pushed.timestamp, pushed.value.humid, 2);
            addItem(pushed.timestamp, pushed.value.envtemp, 3);
            let now = new Date();
            graph2d.setWindow(now.setMinutes(now.getMinutes() - 20), now.setMinutes(now.getMinutes() + 22), {animation: false});
        });


    </script>




</metal:main_macro>
</metal:content-core>

</body>
</html>
